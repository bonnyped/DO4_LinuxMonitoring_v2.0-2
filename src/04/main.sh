#!/bin/bash

# 200 OK — успешный запрос. Клиенту отправлены запрошенные данные.

# 201 Created — в результате успешного выполнения запроса был создан новый ресурс. Если ресурс не может быть создан в данный момент, то сервер вместо этого должен отобразить код 202.

# 400 Bad Request — сервер обнаружил в запросе клиента синтаксическую ошибку.

# 401 Unauthorized — для доступа к запрашиваемому ресурсу требуется аутентификация. Ответ сервера должен содержать поле WWW-Authenticate с перечнем условий аутентификации. Клиент может повторить запрос, включив в сообщение требуемые для аутентификации данные.

# 403 Forbidden — сервер понял запрос, но отказался его выполнять из-за ограничений в доступе к указанному ресурсу. Если для доступа к ресурсу требуется аутентификация средствами HTTP, то сервер вернёт ответ 401 или 407 при использовании прокси. В противном случае ограничения были заданы администратором сервера или разработчиком веб-приложения и могут быть любыми в зависимости от возможностей используемого программного обеспечения. Наиболее вероятными причинами ограничения, может послужить попытка доступа к системным ресурсам веб-сервера (например, файлам .htaccess или .htpasswd) или сервер не удовлетворён IP-адресом клиента, например, при блокировках.

# 404 Not Found — самая распространенная ошибка в интернете, основная причина — ошибка в написании адреса Web-страницы. Сервер понял запрос, но не нашёл соответствующего ресурса по указанному URI.

# 500 Internal Server Error — любая внутренняя ошибка сервера, которая не входит в рамки остальных ошибок класса.

# 501 Not Implemented — сервер не поддерживает возможностей, необходимых для обработки запроса. Типичный ответ для случаев, когда сервер не понимает указанный в запросе метод. Если же метод серверу известен, но он не применим к данному ресурсу, то нужно вернуть ответ 405.

# 502 Bad Gateway — сервер, выступая в роли шлюза или прокси-сервера, получил недействительное ответное сообщение от вышестоящего сервера.

# 503 Service Unavailable — сервер временно не имеет возможности обрабатывать запросы по техническим причинам (обслуживание, перегрузка и прочее). В поле Retry-After заголовка сервер может указать время, через которое клиенту рекомендуется повторить запрос. Хотя во время перегрузки очевидным кажется сразу разрывать соединение, эффективней может оказаться установка большого значения поля Retry-After для уменьшения частоты избыточных запросов.

RED='\033[0;31m'
GREEN='\033[92m'
BLUE='\033[94m'
NC='\033[0m'
RESPONCE_CODES=(200 201 400 401 403 404 500 501 502 503)
REQUEST_METHODS=(GET POST PUT PATCH DELETE)
REMOTE_USER=$(echo $USER)
TIMESTAMP_MY=$(date | awk '{printf "/"$3"/"$4":"}')

if [[ $# -gt 0 ]]; then
        echo -e ${RED}"Скрипт запускается без параметров!"${NC}
        exit
fi

for number in 1 2 3 4 5; do
        NUMBER_OF_ENTRIES=$(shuf -i 100-1000 -n 1)
        DATE_TO_WRITE=$(shuf -i 10-28 -n 1)
        for ((index_entrie = 0; index_entrie < $NUMBER_OF_ENTRIES; ++index_entrie)); do
                #генерируем IP адрес
                GENERATE_IP=$(shuf -i 0-255 -n 4)
                REMOTE_ADDR=$(echo $GENERATE_IP | tr " " .)
                #генерируем дату и время
                GENERATE_TIMESTAMP="["${DATE_TO_WRITE}${TIMESTAMP_MY}$(date | awk '{printf $5" """$7"00]"}')
                #генереруем метод запроса
                GENERATE_REQUEST=$(shuf -i 0-4 -n 1)
                REQUEST=${REQUEST_METHODS[$GENERATE_REQUEST]}
                #генерируем url адрес запроса агента
                NUM=$(shuf -i 1-$(cat ./url_list | wc -l) -n 1)
                AGENTS_URL=$(head '-'$NUM ./url_list | tail +$NUM)
                #генерируем код ответа
                GENERATE_STATUS=$(shuf -i 0-9 -n 1)
                STATUS=${RESPONCE_CODES[$GENERATE_STATUS]}
                #генерируем количество байт запроса
                BODY_BYTES_SENT=$(shuf -i 200-1000 -n 1)
                #генерируем агента
                NUM=$(shuf -i 1-$(cat ./agent_list | wc -l) -n 1)
                HTTP_USER_AGENT=$(head '-'$NUM ./agent_list | tail '+'$NUM)
                #записываем данные в файл
        
                echo "$REMOTE_ADDR - - $GENERATE_TIMESTAMP"' "'$REQUEST $AGENTS_URL'"'" $STATUS $BODY_BYTES_SENT"' "-" ''"'$HTTP_USER_AGENT'"' >> ./$number.log
        done
done
